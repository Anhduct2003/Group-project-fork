CREATE TABLE IF NOT EXISTS users (
  user_id INTEGER PRIMARY KEY AUTOINCREMENT,  
  username TEXT NOT NULL UNIQUE,         
  password_hash TEXT NOT NULL, 
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP  
);

CREATE TABLE IF NOT EXISTS challenges (
  challenge_id INTEGER PRIMARY KEY AUTOINCREMENT, 
  name TEXT NOT NULL,                  
  description TEXT,
  difficulty TEXT,                             
  points INTEGER NOT NULL,                         
  flag TEXT NOT NULL UNIQUE,
  time TIME DEFAULT NULL
);

CREATE TABLE IF NOT EXISTS submissions (
  submission_id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id INTEGER,
  challenge_id INTEGER,
  flag_submitted TEXT,
  is_correct BOOLEAN,
  submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
  FOREIGN KEY (challenge_id) REFERENCES challenges(challenge_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS user_scores (
  user_id INTEGER,                                 
  challenge_id INTEGER,                            
  score INTEGER NOT NULL,                          
  completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  
  PRIMARY KEY (user_id, challenge_id),         
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,   
  FOREIGN KEY (challenge_id) REFERENCES challenges(challenge_id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS challenge_status (
  challenge_id INTEGER,                             
  user_id INTEGER,                                 
  start_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  end_time TIMESTAMP,                           
  status TEXT,                           
  PRIMARY KEY (challenge_id, user_id),          
  FOREIGN KEY (challenge_id) REFERENCES challenges(challenge_id) ON DELETE CASCADE,  
  FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE  
);

CREATE VIEW IF NOT EXISTS leaderboard AS
SELECT u.username, SUM(s.score) AS total_score
FROM user_scores s
JOIN users u ON s.user_id = u.user_id
GROUP BY u.username
ORDER BY total_score DESC;

INSERT INTO challenges (name, description, points, flag, difficulty, time)
VALUES 
('Basic Password Search', 'The basic challenge of finding the correct password account is hidden inside the sources to help players understand how to find the flag.', 20, 'CTF{hihi}', 'easy', '00:30:00'),
('Network Log Investigation', 'This challenge is about finding flags in the network, players need to understand the network part as well as how to check logs.', 30, 'CTF{Say_goodbye}', 'easy', '00:30:00');

INSERT INTO users (username, password_hash) 
VALUES 
('player1', 'hashed_password1'),
('player2', 'hashed_password2'),
('player3', 'hashed_password3');

INSERT INTO submissions (user_id, challenge_id, flag_submitted, is_correct) 
VALUES 
(1, 1, 'CTF{hihi}', TRUE),          
(2, 2, 'CTF{Say_goodbye}', TRUE),   
(3, 1, 'CTF{hihi}', TRUE),          
(3, 2, 'CTF{Say_goodbye}', TRUE);   

INSERT INTO user_scores (user_id, challenge_id, score) 
VALUES 
(1, 1, 20),  
(2, 2, 30),  
(3, 1, 20),  
(3, 2, 30); 
